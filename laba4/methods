def left_rect(f, a, b, step, arr, ilf):
    il = 0  # переменная для хранения суммы
    while a <= (b - step):  # проход по всем прямоугольникам с точкой с левой стороны прямоугольника
        il += f(a) * step  # вычисление площади текущего прямоугольника
        arr.append(il - ilf(a))  # добавление отклонения от аналитического решения
        a += step
    return il

def right_rect(f, a, b, step, arr, ilf):
    il = 0  # переменная для хранения суммы
    while a <= (b - step):  # проход по всем прямоугольникам с точкой с правой стороны
        il += f(a + step) * step  # вычисление площади текущего прямоугольника
        arr.append(il - ilf(a))  # добавление отклонения от аналитического решения
        a += step
    return il

def central_rect(f, a, b, step, arr, ilf):
    il = 0  # переменная для хранения суммы
    while a <= (b - step):  # проход по всем прямоугольникам с центром в середине
        il += f(((a + step) + a) / 2) * step  # вычисление площади текущего прямоугольника
        arr.append(il - ilf(a))  # добавление отклонения от аналитического решения
        a += step
    return il

def trapezoid(f, a, b, step, arr, ilf):
    i_sum = 0  # сумма площадей трапеций
    while a <= b - step:  # проход по всем трапециям
        i_sum += (f(a) + f(a + step)) * (step / 2)  # вычисление площади текущей трапеции
        arr.append(i_sum - ilf(a))  # добавление отклонения от аналитического решения
        a += step
    return i_sum

def parabola(f, a, b, step, arr, ilf):
    i_sum = 0  # сумма площадей по методу симпсона
    while a <= b - step:  # проход по всем интервалам, применяя метод симпсона
        i_sum += (f(a) + 4*f((a + (a + step)) / 2) + f(a + step)) * (step / 6)  # вычисление площади текущего интервала
        arr.append(i_sum - ilf(a))  # добавление отклонения от аналитического решения
        a += step
    return i_sum
