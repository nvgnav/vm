"""
 Численное дифференцирование.

Первая часть - разностный аналог первой производной. Заключается в поиске производной c помощью разности между
 значениями функции в разных точках. Используется конечные разности, a не бесконечно малые величины.

 Используют три разностных аналога, по правой стороне - (f(x0 + h) - f(x0)) / h
 по левой стороне - (f(x0) - f(x0 - h)) / h
 по центру - (f(x0+ h) - f(x0 - h)) / 2h

центральная разность имеет наименьшее отклонение от производной функции
Бояршинов МГ, 2006 -- Численные методы.ч4
"""
from left_right_diff import left, right, central, second
import matplotlib.pyplot as plt
from math import *

#определение исходной функции
def f1(x):
    return sin(x)

#определение производной функции
def df1(x):
    return cos(x)

#определение второй производной
def ddf1(x):
    return -sin(x)


# Начальные значения
x0 = 0 
h = 1e-2
x1 = 2 * pi  # Значение, до которого будем проводить расчеты

# Инициализация списков для построения графиков
plotx = []  
plotl = []  
plotr = []  
plotc = []  
plotscnd = []  

# Создаем рисунок с двумя осями
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))  

# Вычисления и заполнение списков для графиков
while x0 <= x1:  
    plotx.append(x0)  # Добавляем текущее значение x
    plotl.append(df1(x0) - left(f1, x0, h))  
    plotr.append(df1(x0) - right(f1, x0, h))  
    plotc.append(df1(x0) - central(f1, x0, h))  
    plotscnd.append(ddf1(x0) - second(f1, x0, h)) 
    x0 += x1 / 128 
#    x0 += 1e5 * h  

# Построение графиков
ax1.plot(plotx, plotl, color='red', ls='--', marker='*', label='left')  # График для левой разности
ax1.plot(plotx, plotr, color='yellow', ls='-', marker='^', label='right')  # График для правой разности
ax1.plot(plotx, plotc, color='green', ls='dotted', marker='8', label='central')  # График для центральной разности
ax1.set_title('Left, right and central method')  # Заголовок для первого графика
ax1.set_xlabel('x')  
ax1.set_ylabel('y')  
ax1.legend()  
ax1.grid(True)  

ax2.plot(plotx, plotscnd, color='blue', ls='-', marker='.', label='second derivative', linewidth=0.5)  # График для второй производной
ax2.set_title('Second derivative')  # Заголовок для второго графика
ax2.set_xlabel('x')  
ax2.set_ylabel('y')  
ax2.legend()  
ax2.grid(True)  

plt.tight_layout()  

plt.show()  
